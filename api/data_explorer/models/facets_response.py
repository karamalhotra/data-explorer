# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from data_explorer.models.base_model_ import Model
from data_explorer.models.facet import Facet  # noqa: F401,E501
from data_explorer import util


class FacetsResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, facets=None, datak=None, plot_name=None,
                 count=None):  # noqa: E501
        """FacetsResponse - a model defined in Swagger

        :param facets: The facets of this FacetsResponse.  # noqa: E501
        :type facets: List[Facet]
        :param datak: The datak of this FacetsResponse.  # noqa: E501
        :type datak: List[float]
        :param plot_name: The plot_name of this FacetsResponse.  # noqa: E501
        :type plot_name: int
        :param count: The count of this FacetsResponse.  # noqa: E501
        :type count: int
        """
        self.swagger_types = {
            'facets': List[Facet],
            'datak': List[float],
            'plot_name': int,
            'count': int
        }

        self.attribute_map = {
            'facets': 'facets',
            'datak': 'datak',
            'plot_name': 'plot_name',
            'count': 'count'
        }

        self._facets = facets
        self._datak = datak
        self._plot_name = plot_name
        self._count = count

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FacetsResponse of this FacetsResponse.  # noqa: E501
        :rtype: FacetsResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facets(self):
        """Gets the facets of this FacetsResponse.


        :return: The facets of this FacetsResponse.
        :rtype: List[Facet]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this FacetsResponse.


        :param facets: The facets of this FacetsResponse.
        :type facets: List[Facet]
        """

        self._facets = facets

    @property
    def datak(self):
        """Gets the datak of this FacetsResponse.


        :return: The datak of this FacetsResponse.
        :rtype: List[float]
        """
        return self._datak

    @datak.setter
    def datak(self, datak):
        """Sets the datak of this FacetsResponse.


        :param datak: The datak of this FacetsResponse.
        :type datak: List[float]
        """

        self._datak = datak

    @property
    def plot_name(self):
        """Gets the plot_name of this FacetsResponse.

        Thing to plot.   # noqa: E501

        :return: The plot_name of this FacetsResponse.
        :rtype: int
        """
        return self._plot_name

    @plot_name.setter
    def plot_name(self, plot_name):
        """Sets the plot_name of this FacetsResponse.

        Thing to plot.   # noqa: E501

        :param plot_name: The plot_name of this FacetsResponse.
        :type plot_name: int
        """

        self._plot_name = plot_name

    @property
    def count(self):
        """Gets the count of this FacetsResponse.

        Number of entities represented by current facet selection. For example, this could be 40, representing 40 people.   # noqa: E501

        :return: The count of this FacetsResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this FacetsResponse.

        Number of entities represented by current facet selection. For example, this could be 40, representing 40 people.   # noqa: E501

        :param count: The count of this FacetsResponse.
        :type count: int
        """

        self._count = count
